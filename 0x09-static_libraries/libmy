!<arch>
0-isupper.c/    0           0     0     644     256       `
/**
 *  * _isupper - Checks for uppercase character
 *   * @c: The character to be checked
 *    *
 *     * Return: 1 if c is uppercase, 0 otherwise
 *      */
int _isupper(int c)
{
		if (c >= 'A' && c <= 'Z')
					return (1);
			else
						return (0);
}

0-memset.c/     0           0     0     644     416       `
#include "main.h"
#include <stdio.h>

/**
 *  * _memset - function that fills memory with a constant byte
 *   * @s: type char pointer
 *    * @b: type char pointer
 *     * @n: type char bytes of mem pointed by s with constant byte b
 *      * Return: s
 *       */
char *_memset(char *s, char b, unsigned int n)
{
		unsigned int z;

			for (z = 0; z < n; z++)
					{
								s[z] = b;
									}
				return (s);
}
0-strcat.c/     0           0     0     644     423       `
#include "main.h"
/**
 *  * _strcat - concatenate two strings
 *   * @dest: char string
 *    * @src: char string
 *     * Return: pointer to resulting string `dest`
 *      */

char *_strcat(char *dest, char *src)
{
		int i, j;

			for (i = 0; dest[i] != '\0'; i++)
						;

				for (j = 0; src[j] != '\0'; j++)
						{
									dest[i] = src[j];
											i++;
												}

					dest[i] = '\0';
						return (dest);
}

100-atoi.c/     0           0     0     644     800       `
#include "main.h"
#include <stdio.h>
/**
 *  * _atoi - convert string into integer.
 *   * @s: Type char pointer
 *    * Return: Always 0.
 *     */
int _atoi(char *s)
{
		int num, a, flag;

			flag = 1;
				a = num = 0;

					while (((s[a] < '0') || s[a] > '9') && s[a] != 0)
							{
										if (s[a] == '-')
														flag = flag * -1;
												a++;
													}
						while (((s[a] >= '0') && s[a] <= '9') && s[a] != 0)
								{
											if (num >= 0)
														{
																		num = num * 10 - (s[a] - '0');
																					a++;
																							}
													else
																{
																				num = num * 10 - (s[a] - '0');
																							a++;
																									}
														}
							flag = flag * -1;
								return (num * flag);
}
1-isdigit.c/    0           0     0     644     274       `
#include "main.h"

/**
 *  * _isdigit - Checks for a digit (0 through 9)
 *   * @c: The character to be checked
 *    *
 *     * Return: 1 if c is a digit, 0 otherwise
 *      */
int _isdigit(int c)
{
		if (c >= '0' && c <= '9')
					return (1);
			else
						return (0);
}
1-memcpy.c/     0           0     0     644     411       `
#include "main.h"
#include <stdio.h>

/**
 *  * _memcpy - function that copies memory to area
 *   * @dest: type char pointer
 *    * @src: type char memory area
 *     * @n: type char bytes from src to dest
 *      * Return: dest.
 *       */
char *_memcpy(char *dest, char *src, unsigned int n)
{
		unsigned int z;

			for (z = 0; z < n; z++)
					{
								dest[z] = src[z];
									}

				return (dest);
}

1-strncat.c/    0           0     0     644     471       `
#include "main.h"

/**
 *  * _strncat - concatenate two strings
 *   * @dest: type char str
 *    * @src: type char str
 *     * @n: number of elements to concatenate in
 *      * Return: pointer to resulting `dest`dest
 *       */

char *_strncat(char *dest, char *src, int n)
{
		int a, b;

			for (a = 0; dest[a] != '\0'; a++)
					{
							}
				for (b = 0; src[b] != '\0' && n > 0; b++, n--, a++)
						{
									dest[a] = src[b];
										}
					return (dest);
}

2-strchr.c/     0           0     0     644     382       `
#include "main.h"
#include <stdio.h>

/**
 *  * _strchr - Locates a character in a string
 *   * @s: type char pointer
 *    * @c: type char memory area
 *     * Return: NULL
 *      */
char *_strchr(char *s, char c)
{
		while (*s != '\0')
				{
							if (*s == c)
											return (s);
									s++;
										}
			if (*s == c)
						return (s);
				else
							return (NULL);
}
2-strlen.c/     0           0     0     644     254       `
#include "main.h"
#include <stdio.h>
/**
 *  * _strlen - Returns the lenght of a string.
 *   * @s: Type char pointer
 *    * Return: Always 0.
 *     */
int _strlen(char *s)
{
		int c;

			for (c = 0; s[c] != 0; c++)
					{
							}
					return (c);

}
2-strncpy.c/    0           0     0     644     606       `
#include "main.h"
#include <stdio.h>

/**
 *  * *_strncpy - Function that copies a string.
 *   * @dest: string
 *    * @src: string
 *     * @n: number of chars to copy over
 *      * Return: Always 0.
 *       */
char *_strncpy(char *dest, char *src, int n)

{
		int a = 0;
			int b = 0;

				while (a != n)
						{
									dest[a] = src[b];

											if (src[a] == '\0')
														{
																		dest[b] = '\0';
																					break;
																							}
													a++;
															b++;
																}
					while (b != n)
								dest[b++] = '\0';

						return (dest);
}
3-islower.c/    0           0     0     644     274       `
#include "main.h"

/**
 *  * _islower - Checks for lowercase character
 *   * @c: The character to be checked
 *    *
 *     * Return: 1 if c is lowercase, 0 otherwise
 *      */
int _islower(int c)
{
		if (c >= 'a' && c <= 'z')
					return (1);
			else
						return (0);
}
3-puts.c/       0           0     0     644     255       `
#include "main.h"

/**
 *  * _puts - prints a string on screen.
 *   * @str: pointer to the string to print.
 *    */

void _puts(char *str)
{
		int i;

			for (i = 0; str[i] != '\0'; i++)
					{
								_putchar(str[i]);
									}
				_putchar('\n');
}

3-strcmp.c/     0           0     0     644     371       `
#include "main.h"
#include <stdio.h>

/**
 *  * _strcmp - Function that compares two strings.
 *   * @s1: type str
 *    * @s2: type str
 *     * Return: Always 0.
 *      */
int _strcmp(char *s1, char *s2)

{
		int a;

			for (a = 0; s1[a] != '\0' && s2[a] != '\0'; a++)
					{
								if (s1[a] != s2[a])
											return (s1[a] - s2[a]);
									}
				return (0);
}

3-strspn.c/     0           0     0     644     757       `
#include "main.h"
#include <stdio.h>

/**
 *  * _strspn - gets the lenght of a prefix substring.
 *   * @s: type char returns the number of bytes
 *    * @accept: bytes from accept
 *     * Return: return x
 *      */

unsigned int _strspn(char *s, char *accept)
{
		unsigned int str;
			int x, y, z;

				x = 0;
					while (s[x] != '\0')
							{
										z = 0;
												for (y = 0; accept[y] != '\0'; y++)
															{
																			if (s[x] == accept[y])
																							{
																												z = 1;
																															}
																					}
														y = 0;
																if (z == 0)
																				break;
																		str++;
																				x++;
																					}
						return (x);
}

4-isalpha.c/    0           0     0     644     326       `
#include "main.h"

/**
 *  * _isalpha - Checks for alphabetic character
 *   * @c: The character to be checked
 *    *
 *     * Return: 1 if c is a letter, lowercase or uppercase, 0 otherwise
 *      */
int _isalpha(int c)
{
		if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
					return (1);
			else
						return (0);
}
4-strpbrk.c/    0           0     0     644     715       `
#include "main.h"
#include <stdio.h>

/**
 *  * _strpbrk - Search for a string of any set of bytes.
 *   * @s: type char pointer
 *    * @accept: type char pointer
 *     * Return: s or null if no such byte type is found.
 *      */
char *_strpbrk(char *s, char *accept)
{
		int x, y;
			char *p;

				x = 0;
					while (s[x] != '\0')
							{
										y = 0;
												while (accept[y] != '\0')
															{
																			if (accept[y] == s[x])
																							{
																												p = &s[x];
																																return (p);
																																			}
																						y++;
																								}
														x++;
															}
						return (NULL);
}

5-strstr.c/     0           0     0     644     639       `
#include "main.h"
#include <stdio.h>

/**
 *  * _strstr - Locates a substring.
 *   * @haystack: type char str
 *    * @needle: type char sub str
 *     * Return: haystack or NULL.
 *      */
char *_strstr(char *haystack, char *needle)
{
		while (*haystack != '\0')
				{
							char *all = haystack;
									char *ptt = needle;

											while (*ptt == *haystack && *ptt != '\0' && *haystack != '\0')
														{
																		haystack++;
																					ptt++;
																							}
													if (*ptt == '\0')
																	return (all);
															haystack = all + 1;
																}
			return (NULL);
}

6-abs.c/        0           0     0     644     239       `
#include "main.h"

/**
 *  * _abs - Computes the absolute value of an integer
 *   * @n: The integer
 *    *
 *     * Return: The absolute value of n
 *      */
int _abs(int n)
{
		if (n >= 0)
					return (n);
			else
						return (-n);
}

9-strcpy.c/     0           0     0     644     370       `
#include "main.h"
#include <stdio.h>
/**
 *  * *_strcpy - Copies the string pointed to by src.
 *   * @dest: Type char pointer
 *    * @src: Type char pointer
 *     * Return: Always 0.
 *      */
char *_strcpy(char *dest, char *src)
{

		int a;

			for (a = 0; src[a] != '\0'; a++)
					{
								dest[a] = src[a];
									}
				dest[a] = '\0';

					return (dest);
}
_putchar.c/     0           0     0     644     279       `
#include <unistd.h>

/**
 *  * _putchar - Writes a character to stdout
 *   * @c: The character to be written
 *    *
 *     * Return: On success 1
 *      * On error, -1 is returned and errno is set appropriately
 *       */
int _putchar(char c)
{
		return (write(1, &c, 1));
}

